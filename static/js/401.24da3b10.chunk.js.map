{"version":3,"file":"static/js/401.24da3b10.chunk.js","mappings":"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","sources":["helpers/query/anime.tsx","helpers/query/user.tsx","page/AnimeList/styles.ts","components/pagination/styles.ts","components/pagination/index.tsx","page/AnimeList/index.tsx"],"sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const GET_LIST_ANIME = gql`\nquery ($id: Int, $page: Int, $perPage: Int, $search: String) {\n\tPage (page: $page, perPage: $perPage) {\n\t\tpageInfo {\n\t\t\ttotal\n\t\t\tcurrentPage\n\t\t\tlastPage\n\t\t\thasNextPage\n\t\t\tperPage\n\t\t}\n\t\tmedia (id: $id, search: $search) {\n\t\t\tid\n\t\t\ttitle {\n\t\t\t\tenglish\n\t\t\t}\n\t\t\tcoverImage {\n\t\t\t\tlarge\n\t\t\t}\n\t\t}\n\t}\n}`\n\nexport const GET_ANIME_DETAIL = gql`\nquery ($id: Int) {\n\tMedia (id: $id) {\n\t\tid\n\t\ttitle {\n\t\t\tenglish\n\t\t}\n\t\tbannerImage\n\t\tdescription\n\t\tcoverImage {\n\t\t\tmedium\n\t\t}\n\t\tstatus\n\t\tchapters\n\t\tpopularity\n\t\tisFavourite\n\t\trankings {\n\t\t\tid\n\t\t\trank\n\t\t}\n\t}\n}`\n\nexport const GET_COLLECTION = gql`\n\tquery($userId: Int) {\n\t\tMediaListCollection(userId: $userId, type: ANIME) {\n\t\t\tlists {\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t}\n`\n","import { gql } from \"@apollo/client\"\nexport const GET_USER = gql `\n  query ($id: Int) {\n    User(id: $id) {\n      id\n      name\n    }\n  }\n`","import styled from '@emotion/styled'\n\nexport const ContainerListAnime = styled.div(\n    {   \n        padding: \"30px 30px\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        borderRadius: 5,\n        gap: 30,\n        justifyContent: \"center\",\n    }\n)\n\nexport const CardAnime = styled.div(\n    {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        width: 300,\n        height: 320,\n        borderRadius: 8,\n        background: \"white\",\n        padding: \"15px 10px\",\n        cursor: \"pointer\",\n        boxShadow: '0px 2px 8px -2px rgba(20, 38, 86, 0.16)',\n        '&:hover': {\n            transform: 'translate(-2px, -2px)'\n        },\n        '&:active': {\n            transform: 'translate(2px, 2px)'\n        },\n        '& > img': {\n            width: 250,\n            height: 250\n        },\n        '& > p': {\n            textAlign: \"center\",\n            fontWeight: 600,\n            fontSize: 16,\n            color: \"#1e1e1e\"\n        }\n    }\n)","\nimport styled from '@emotion/styled'\n\nexport const ContainerPagination = styled.div({\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    padding: \"0 30px\",\n    cursor: \"pointer\",\n    marginBottom: 40\n})\n\nexport const PaginationComponent = styled.div({\n    display: \"flex\",\n    gap: 5,\n    padding: 10\n}) \n\nexport const Page = styled.div({\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        color: \"#2E4885\",\n        width:  32,\n        height: 32,\n        borderRadius: 8,\n        fontWeight: 400,\n        fontSize: 14,\n    },\n    ({active}: {active?:boolean}) => ({\n        backgroundColor : active ? \"#2E4885\" : \"#d7dce0\",\n        color: active ? \"white\" : \"#2E4885\",\n    }),\n)","import { FC, useEffect, useState } from 'react'\nimport { ContainerPagination, PaginationComponent, Page } from './styles'\nimport { PaginationProps } from './types'\n\nconst Pagination:FC<PaginationProps> = ({currentPage, hasNextPage, onClick}) => {\n\n\tconst [orderPage, setOrderPage] = useState<number[]>([1])\n\tuseEffect(() => {\n    if (currentPage < 2) {\n      if (hasNextPage) {\n        setOrderPage([1, 2, 3])\n      } else {\n        setOrderPage([1])\n      }\n\n      return\n    }\n    if (!hasNextPage) setOrderPage([currentPage - 1, currentPage])\n    else {\n      setOrderPage([currentPage - 1, currentPage, currentPage + 1])\n    }\n  }, [currentPage, hasNextPage])\n\n  return (\n    <ContainerPagination>\n\t\t\t<PaginationComponent>\n\t\t\t\t<Page onClick={() => currentPage !== 1 && onClick(currentPage - 1)}>left</Page>\n\t\t\t\t{orderPage.map(value => (\n\t\t\t\t\t<Page\n\t\t\t\t\t\tactive={currentPage === value}\n\t\t\t\t\t\tonClick={() => value !== currentPage && onClick(value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{value}\n\t\t\t\t\t</Page>\n\t\t\t\t))}\n\t\t\t\t<Page onClick={() => hasNextPage && onClick(currentPage + 1)}>right</Page>\n\t\t\t</PaginationComponent>\n    </ContainerPagination>\n  )\n}\n\nexport default Pagination","import { FC, useEffect, useState } from 'react'\nimport { useUserContext } from '../../context/UserContext'\nimport { GET_USER } from '../../helpers/query/user'\nimport { GET_LIST_ANIME } from '../../helpers/query/anime'\nimport { useQuery } from '@apollo/client'\nimport { CardAnime, ContainerListAnime } from './styles'\nimport Pagination from '../../components/pagination'\nimport { useNavigate } from 'react-router-dom'\nimport Loader from '../../components/loader'\nimport { STATUS } from '../../helpers/constants/anime'\nimport { AnimeListType } from './types'\n\nconst AnimeList:FC = () => {\n\tconst navigate = useNavigate()\n  const {user, saveUser} = useUserContext()\n\tconst [page, setPage] = useState(1)\n\t\n\tuseQuery(GET_USER, {\n\t\tvariables: {id: 5813837}, \n\t\tskip: !!user?.id, \n\t\tonCompleted: (data) => !user?.id && saveUser({...data?.User, collectionList: STATUS})\n\t});\n\n\tconst {loading:loadingAnimeList, data:animeList} = useQuery(GET_LIST_ANIME, {variables: {\n\t\tpage,\n\t\tperPage: 10\n\t}})\n\n\tuseEffect(() => {\n\t\tsaveUser({...user, banner: undefined})\n\t}, [])\n\t\n  return (\n\t\t<>\n\t\t\t<ContainerListAnime>\n\t\t\t\t{!!loadingAnimeList && <Loader />}\n\t\t\t\t{animeList?.Page.media.map((value:AnimeListType) => (\n\t\t\t\t\t<CardAnime onClick={() => navigate(`/list/${value.id}`)}>\n\t\t\t\t\t\t<img src={value?.coverImage.large} alt=\"banner\" />\n\t\t\t\t\t\t<p>{value?.title.english}</p>\n\t\t\t\t\t</CardAnime>\n\t\t\t\t))}\n\t\t\t</ContainerListAnime>\n\t\t\t{\n\t\t\t\t!loadingAnimeList && \n\t\t\t\t\t<Pagination\n\t\t\t\t\t\tcurrentPage={animeList?.Page.pageInfo.currentPage}\n\t\t\t\t\t\thasNextPage={animeList?.Page.pageInfo.hasNextPage}\n\t\t\t\t\t\tonClick={(value:number) => setPage(value)}\n\t\t\t\t\t/>\n\t\t\t}\n\t\t</>\n  )\n}\n\nexport default AnimeList"],"names":["GET_LIST_ANIME","gql","_templateObject","_taggedTemplateLiteral","GET_ANIME_DETAIL","_templateObject2","GET_COLLECTION","_templateObject3","GET_USER","ContainerListAnime","styled","div","padding","display","flexWrap","borderRadius","gap","justifyContent","CardAnime","flexDirection","alignItems","width","height","background","cursor","boxShadow","transform","textAlign","fontWeight","fontSize","color","ContainerPagination","marginBottom","PaginationComponent","Page","_ref","active","backgroundColor","currentPage","hasNextPage","onClick","_useState","useState","_useState2","_slicedToArray","orderPage","setOrderPage","useEffect","_jsx","children","_jsxs","map","value","navigate","useNavigate","_useUserContext","useUserContext","user","saveUser","page","setPage","useQuery","variables","id","skip","onCompleted","data","_objectSpread","User","collectionList","STATUS","_useQuery","perPage","loadingAnimeList","loading","animeList","banner","undefined","_Fragment","Loader","media","concat","src","coverImage","large","alt","title","english","Pagination","pageInfo"],"sourceRoot":""}